#!/bin/sh
# shellcheck disable=SC2016,SC2088
set -e
set -u

fn_version() {
    echo "aliasman v1.1.0 (2023-02-23)"
}

fn_help() {
    fn_version
    echo "A cross-shell (POSIX-compliant) alias manager for bash, zsh, and fish"
    echo ""
    echo "USAGE:"
    echo "    aliasman [FLAGS] [--] <aliasname>[=][command] [flags, opts, args, pipes, etc]"
    echo ""
    echo "FLAGS:"
    echo "    -d, --delete                     Delete by aliasname"
    echo "    -e, --edit                       Open ~/.config/envman/alias.sh for editing"
    echo "        --help                       Prints help information"
    echo "    -V, --version                    Prints version information"
    echo ""
    echo "EXAMPLES:"
    echo "    Add or replace (short):"
    echo "        aliasman ll 'lsd -lAhF'"
    echo "    or (long):"
    echo "        aliasman alias ll='lsd -lAhF'"
    echo ""
    echo "    View current:"
    echo "        aliasman ll"
    echo ""
    echo "    Delete:"
    echo "        aliasman -d ll"
    echo ""
    echo "    Common Aliases:"
    echo "        aliasman cat 'bat --style=plain'"
    echo "        aliasman curl 'curlie'"
    echo "        aliasman ls 'lsd -F'"
    echo "        aliasman la 'lsd -AF'"
    echo "        aliasman ll 'lsd -lAhF'"
    echo "        aliasman tree 'lsd -F --tree'"
    echo "        aliasman xrnd 'xxd -l24 -ps /dev/urandom'"
    echo ""
    echo "FILES:"
    echo ""
    echo "    ~/.bashrc"
    echo "    ~/.config/envman/alias.env"
    echo "    ~/.config/envman/load.sh"
    echo "    ~/.config/envman/load.fish"
    echo "    ~/.config/fish/config.fish"
    echo "    ~/.profile"
    echo "    ~/.zshrc"
    echo ""
    echo "LIMITATIONS:"
    echo ""
    echo "    You may use single quotes around the alias definition, like so:"
    echo ""
    echo "        # Generate 24 random bytes, url-safe base64-encoded"
    echo "        aliasman rnd 'xxd -l24 -ps /dev/urandom |"
    echo "                xxd -r -ps |"
    echo "                base64 |"
    echo "                tr -d = |"
    echo "                tr + - |"
    echo "                tr / _'"
    echo ""
    echo "    However, the use of single quotes as part of flags, options, and arguments"
    echo "    is not yet supported. Neither are newlines."
    echo ""
}

fn_init() {
    mkdir -p ~/.config/envman/
    if [ ! -e ~/.config/envman/alias.env ]; then
        touch ~/.config/envman/alias.env
    fi

    if [ ! -e ~/.config/envman/load.sh ]; then
        # shellcheck disable=SC2016
        {
            echo '# Generated for envman. Do not edit.'
            echo 'for x in ~/.config/envman/*.env; do'
            echo '    my_basename="$(basename "${x}")"'
            echo '    if [ "*.env" = "${my_basename}" ]; then'
            echo '        continue'
            echo '    fi'
            echo ''
            echo '    # shellcheck source=/dev/null'
            echo '    . "${x}"'
            echo 'done'
        } > ~/.config/envman/load.sh
    fi

    if [ ! -e ~/.config/envman/load.fish ]; then
        # shellcheck disable=SC2016
        {
            echo '# Generated for envman. Do not edit.'
            echo 'for x in ~/.config/envman/*.env'
            echo '	  source "$x"'
            echo 'end'
        } > ~/.config/envman/load.fish
    fi

    if ! grep -q -F '/.config/envman/load.sh' ~/.profile; then
        fn_echo_load_sh >> ~/.profile
    fi
    if command -v bash > /dev/null; then
        if [ -e ~/.bashrc ]; then
            if ! grep -q -F '/.config/envman/load.sh' ~/.bashrc; then
                fn_echo_load_sh >> ~/.bashrc
            fi
        fi
    fi
    if command -v zsh > /dev/null; then
        if [ -e ~/.zshrc ]; then
            if ! grep -q -F '/.config/envman/load.sh' ~/.zshrc; then
                fn_echo_load_sh >> ~/.zshrc
            fi
        fi
    fi
    if command -v fish > /dev/null; then
        mkdir -p ~/.config/fish
        if [ -e ~/.config/fish/config.fish ]; then
            touch ~/.config/fish/config.fish
        fi
        if ! grep -q -F '/.config/envman/load.fish' ~/.config/fish/config.fish; then
            fn_echo_load_fish >> ~/.config/fish/config.fish
        fi
    fi
}

fn_echo_load_fish() {
    echo ''
    echo '# Generated for envman. Do not edit.'
    echo 'test -s "$HOME/.config/envman/load.fish"; and source "$HOME/.config/envman/load.fish"'
}

fn_echo_load_sh() {
    echo ''
    echo '# Generated for envman. Do not edit.'
    echo '[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"'
}

fn_init

my_remove=""
if [ "--" = "${1-}" ]; then
    # A reasonable person could have an alias named 'version' or 'edit'.
    # An unreasonable person could even have an alias named '-h'.
    # Who am I to judge?
    shift 1
else
    if [ "-h" = "${1-}" ] || [ "--help" = "${1-}" ] || [ "help" = "${1-}" ]; then
        fn_help
        exit 0
    fi

    if [ "-V" = "${1-}" ] || [ "--version" = "${1-}" ] || [ "version" = "${1-}" ]; then
        fn_version
        exit 0
    fi

    if [ "-e" = "${1-}" ] || [ "--edit" = "${1-}" ] || [ "edit" = "${1-}" ]; then
        ${VISUAL:-vim} ~/.config/envman/alias.env
        exit 0
    fi

    if [ "-d" = "${1-}" ] || [ "--delete" = "${1-}" ] || [ "delete" = "${1-}" ]; then
        my_remove="true"
        shift 1
    fi

    if [ "alias" = "${1-}" ]; then
        # ignore 'alias' prefix for compat with copy-paste
        shift 1
    fi
fi

my_alias="${1-}"
if [ -z "${my_alias}" ]; then
    fn_help
    exit 1
fi
shift 1

my_command=""
case "${my_alias}" in
*=*)
    # Can handle either of:
    #     cat='bat --style=plain'
    #     cat=bat --style=plain
    my_alias_bak="${my_alias}"
    my_alias="$(
        echo "${my_alias_bak}" | cut -d'=' -f1
    )"

    my_alias_len="${#my_alias}"
    my_alias_len=$((my_alias_len + 2))

    # Stores 'bat' in the case of
    #     cat=bat --style=plain
    my_command="$(
        echo "${my_alias_bak}" | cut -c "${my_alias_len}"-
    )"
    ;;
*)
    # ignore
    ;;
esac

# combines possible partial command with possible extra arguments
my_command="$(
    # shellcheck disable=SC2046,SC2086
    echo $(
        # shellcheck disable=SC2046,SC2086
        echo ${my_command}
        # shellcheck disable=SC2048,SC2086
        echo ${*-}
    )
)"
my_command_name="$(
    # shellcheck disable=SC2086
    echo $my_command | cut -d' ' -f1
)"

my_current="$(
    grep -E "^alias ${my_alias}=" ~/.config/envman/alias.env |
        cut -d'=' -f2- || true
)"

my_new="alias ${my_alias}='${my_command}'"

fn_remove() {
    if [ -n "${my_command}" ]; then
        "Incorrect usage. See help"
        return 1
    fi

    if [ -z "${my_current}" ]; then
        echo "alias '${my_alias}' is not set"
        return 1
    fi

    printf 'Removing "alias %s=%s" ... ' "${my_alias}" "${my_current}"

    mv ~/.config/envman/alias.env ~/.config/envman/alias.env.bak
    sed "/^alias ${my_alias}=/d" ~/.config/envman/alias.env.bak > \
        ~/.config/envman/alias.env

    echo "success!"
}

fn_set() {
    if ! command -v "${my_command_name}" > /dev/null; then
        echo "aliasman: command '${my_command_name}' not found"
        exit 1
    fi

    if [ -z "${my_current}" ]; then
        printf "Setting \"alias %s='%s'\" ... " "${my_alias}" "${my_command}"

        echo "${my_new}" >> ~/.config/envman/alias.env

        echo "success!"
        return 0
    fi

    printf "Replacing \"alias %s=%s\" with \"alias %s='%s'\" ... " "${my_alias}" "${my_current}" "${my_alias}" "${my_command}"

    mv ~/.config/envman/alias.env ~/.config/envman/alias.env.bak
    sed "/^alias ${my_alias}=/d" ~/.config/envman/alias.env.bak > \
        ~/.config/envman/alias.env
    echo "${my_new}" >> ~/.config/envman/alias.env

    echo "success!"
}

fn_get() {
    if [ -n "${my_current}" ]; then
        echo "alias ${my_alias}=${my_current}"
        return 0
    fi

    echo "alias ${my_alias}=(not set)"
}

if [ -n "${my_remove}" ]; then
    fn_remove # "${my_alias}" "${my_current}"
    echo ""
    echo "ONE MORE STEP:"
    echo ""
    echo "    Close and reopen your shell."
    echo ""
    exit 0
fi

if [ -n "${my_command}" ]; then
    fn_set # "${my_alias}" "${my_command}" "${my_current}"
    echo ""
    echo "ONE MORE STEP:"
    echo ""
    echo "    Copy, paste, and run this to set the alias in the current shell:"
    echo "    (or exit and reopen your terminal)"
    echo ""
    echo "    ${my_new}"
    echo ""
    exit 0
fi

fn_get # "${my_alias}"
